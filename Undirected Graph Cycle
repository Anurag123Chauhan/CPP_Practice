#include <bits/stdc++.h>
using namespace std;

class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool bfs(int node,vector<vector<int>>& adj, vector<int>& vis){
        queue<pair<int,int>>pq;
        vis[node] = 1;
        pq.push({node,-1});
        while(!pq.empty()){
            int n = pq.front().first;
            int parent = pq.front().second;
            pq.pop();
            
            for(auto a:adj[n]){
                if(!vis[a]){
                    vis[a] = 1;
                    pq.push({a,n});
                }
                else if(a!=parent)return true;
            }
        }
        return false;
    }
    bool dfs(int node,int parent, vector<vector<int>>& adj, vector<int>& vis){
        vis[node] = 1;
        for(auto a:adj[node]){
            if(!vis[a]){
                if(dfs(a,node,adj,vis))return true;
            }
            else if(a!= parent)return true;
        }
        return false;
    }
    bool isCycle(vector<vector<int>> adj){
        int n = adj.size();
        vector<int>vis(n,0);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                if(dfs(i,-1,adj,vis))return true;
            }
        }
        return false;
    }
};

int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj(V);
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
